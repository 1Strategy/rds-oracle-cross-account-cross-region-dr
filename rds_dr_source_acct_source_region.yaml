AWSTemplateFormatVersion: '2010-09-09'
Description: 'Set up cross-account and cross-region DR solution for RDS.'

Parameters:
  SourceRegion:
    Type: String
    Description: The source region of the RDS instance.
    Default: us-west-2

  DRRegion:
    Type: String
    Description: The DR region to copy the backups of RDS snapshots.
    Default: us-east-2

  SnapshotFrequency:
    Type: String
    Description: The frequency to take the RDS snapshot, the unit of time can be minute, minutes, hour, hours, day, days.
    Default: rate(5 minutes)

  MaxSnapshotRetention:
    Type: Number
    Description: Max screenshot retention number.
    Default: 2

Resources:
  RDSBackupExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      - arn:aws:iam::aws:policy/service-role/AmazonSNSRole
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  RDSCreateSnapshot: 
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: |
          import boto3
          import botocore
          import logging
          import os
          import uuid

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def is_tag_matching(tag_list, tag_to_match):
              # for tag pair like { 'Key': 'key', 'Value': 'Value'}
              for tag_pair in tag_list:
                  if tag_pair == tag_to_match:
                      return True
              return False

          def lambda_handler(event, context):
              region = os.environ['source_region']
              rds_client = boto3.client('rds', region_name=region)
              rds_instances = rds_client.describe_db_instances()['DBInstances']
              dr_instances = []
              for instance in rds_instances:
                  instance_arn = instance['DBInstanceArn']
                  print('Instance ARN: ' + instance_arn)
                  if is_tag_matching(
                      rds_client.list_tags_for_resource(ResourceName=instance_arn)['TagList'],
                      {'Key': 'dr', 'Value': 'true'}):
                      print('Instance with DR Tag: ' + instance_arn)
                      dr_instances.append(instance)

              for dr_instance in dr_instances:
                  snapshot_name = '{}-{}'.format(dr_instance['DBInstanceIdentifier'], uuid.uuid4())
                  print('Creating snapshot: {} for: {}'.format(snapshot_name, dr_instance['DBInstanceIdentifier']))
                  rds_client.create_db_snapshot(
                      DBSnapshotIdentifier=snapshot_name,
                      DBInstanceIdentifier=dr_instance['DBInstanceIdentifier']
                  )
      Handler: index.lambda_handler
      Role: !GetAtt RDSBackupExecutionRole.Arn
      Runtime: python3.6
      Timeout: '60'
      Environment:
        Variables:
          source_region: !Ref SourceRegion
  
  RDSCrossRegionCopySnapshot: 
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: |
          import boto3
          import botocore
          import logging
          import os
          import json

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def is_tag_matching(tag_list, tag_to_match):
              for tag_pair in tag_list:
                  if tag_pair == tag_to_match:
                      return True
              return False

          def get_all_snapshots(db_instance_id, rds_client, pagination_marker='', max_records=100):
              response = rds_client.describe_db_snapshots(DBInstanceIdentifier=db_instance_id, SnapshotType='manual', Marker=pagination_marker, MaxRecords=max_records)
              snapshots = response['DBSnapshots']
              if ('Marker' in response) and (len(response['Marker']) > 0):
                  return snapshots + get_all_snapshots(db_instance_id, rds_client, pagination_marker=response['Marker'], max_records=max_records)
              else:
                  return snapshots

          def cleanup_snapshots(db_instance_id, tag_to_match, expected_snapshot_number, region_name):
              rds_client_source = boto3.client('rds', region_name=region_name)
              snapshots_raw = get_all_snapshots(db_instance_id, rds_client_source)
              snapshots = []
              for s in snapshots_raw:
                  if s['Status'] == 'available':
                      snapshots.append(s)
              if len(snapshots) <= expected_snapshot_number:
                  print('No cleanup needed.')
                  return
              
              print('Cleaning up snapshots for db instance {}, expected snapshot to keep: {}.'.format(db_instance_id, expected_snapshot_number))
              snapshots_dr = []
              for snapshot in snapshots:
                  if is_tag_matching(rds_client_source.list_tags_for_resource(ResourceName=snapshot['DBSnapshotArn'])['TagList'],tag_to_match):
                      snapshots_dr.append(snapshot)
              delete_count = len(snapshots_dr) - expected_snapshot_number
              if delete_count > 0:
                  sorted_dr_snapshots = sorted(
                      snapshots_dr,
                      key=lambda snapshot: snapshot['SnapshotCreateTime']
                  )
                  while delete_count > 0:
                      snapshot_id = sorted_dr_snapshots[delete_count - 1]['DBSnapshotIdentifier']
                      try:
                          print('Removing snapshot {}'.format(snapshot_id))
                          rds_client_source.delete_db_snapshot(DBSnapshotIdentifier=snapshot_id)
                      except:
                          print('Error removing snapshot {}'.format(snapshot_id))
                      delete_count -= 1
              print('Finish cleaning up snapshots for db instance {}'.format(db_instance_id))

          def lambda_handler(event, context):
              print(event)
              rds_event = json.loads(event['Records'][0]['Sns']['Message'])
              rds_event_message = rds_event['Event Message']
              source_region = os.environ['source_region']
              target_region = os.environ['target_region']
              max_retention = int(os.environ['max_retention'])

              if rds_event_message == 'Manual snapshot created':
                  print('Manual snapshot created')
                  snapshot_id = rds_event['Source ID']
                  
                  rds_client_source = boto3.client('rds', region_name=source_region)
                  snapshot = rds_client_source.describe_db_snapshots(
                      DBSnapshotIdentifier=snapshot_id
                  )
                  snapshot_arn = snapshot['DBSnapshots'][0]['DBSnapshotArn']
                  if is_tag_matching(
                      rds_client_source.list_tags_for_resource(ResourceName=snapshot_arn)['TagList'],
                      {'Key': 'dr', 'Value': 'true'}):
                      # copy to dr region
                      rds_client_target = boto3.client('rds', region_name=target_region)
                      rds_client_target.copy_db_snapshot(
                          SourceDBSnapshotIdentifier=snapshot_arn,
                          TargetDBSnapshotIdentifier='{}-dr'.format(snapshot_id),
                          SourceRegion=source_region,
                          CopyTags=True
                      )
                  # cleanup
                  cleanup_snapshots(
                      snapshot['DBSnapshots'][0]['DBInstanceIdentifier'],
                      {'Key': 'dr', 'Value': 'true'},
                      max_retention,
                      source_region)
      Handler: index.lambda_handler
      Role: !GetAtt RDSBackupExecutionRole.Arn
      Runtime: python3.6
      Timeout: '60'
      Environment:
        Variables:
          source_region: !Ref SourceRegion
          target_region: !Ref DRRegion
          max_retention: !Ref MaxSnapshotRetention

  CloudWatchEventScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "CloudWatch Scheduled Rule to take RDS snapshots"
      ScheduleExpression: !Ref SnapshotFrequency
      State: DISABLED
      Targets: 
      - Arn: !GetAtt RDSCreateSnapshot.Arn
        Id: labmda_create_snapshot

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref RDSCreateSnapshot
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CloudWatchEventScheduledRule.Arn

  SNSTopicRDSSnapshotCreated:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
      - Endpoint: !GetAtt RDSCrossRegionCopySnapshot.Arn
        Protocol: lambda

  PermissionForRDSCrossRegionCopySnapshot: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref RDSCrossRegionCopySnapshot
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopicRDSSnapshotCreated

  RDSEventSubscription:
    Type: "AWS::RDS::EventSubscription"
    Properties: 
      EventCategories: 
        - creation
      SnsTopicArn: !Ref SNSTopicRDSSnapshotCreated
      SourceType: db-snapshot
      Enabled: true
